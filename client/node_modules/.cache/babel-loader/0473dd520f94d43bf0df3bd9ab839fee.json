{"ast":null,"code":"import _defineProperty from \"C:\\\\Users\\\\hayam\\\\Projects\\\\react\\\\online-store\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport firebase from \"firebase/app\";\nimport \"firebase/firestore\";\nimport \"firebase/auth\";\nconst config = {\n  apiKey: \"AIzaSyDdojOuN3-mqZFJL80sSkPyn--tkZOHVlw\",\n  authDomain: \"anorak-db.firebaseapp.com\",\n  databaseURL: \"https://anorak-db.firebaseio.com\",\n  projectId: \"anorak-db\",\n  storageBucket: \"anorak-db.appspot.com\",\n  messagingSenderId: \"895274800817\",\n  appId: \"1:895274800817:web:70ba2c9ddebad1b6c8f490\",\n  measurementId: \"G-68PG449E20\"\n}; // for storing user data in firebase\n\nexport const createUserProfileDocument = async (userAuth, extraData) => {\n  // return if no user logged in\n  if (!userAuth) return;\n  const userRef = firestore.doc(\"users/\".concat(userAuth.uid));\n  const snapShot = await userRef.get(); // create snapshot if it hasn't been created\n\n  if (!snapShot.exists) {\n    const displayName = userAuth.displayName,\n          email = userAuth.email;\n    const createdAt = new Date(); // timestamp\n\n    try {\n      await userRef.set(_objectSpread({\n        displayName,\n        email,\n        createdAt\n      }, extraData));\n    } catch (e) {\n      console.log(\"error creating user\", e.message);\n    }\n  }\n\n  return userRef;\n};\nfirebase.initializeApp(config);\nexport const addCollectionDocuments = async (collectionKey, objectsToAdd) => {\n  const collectionRef = firestore.collection(collectionKey);\n  const batch = firestore.batch(); // loop over objectsToAdd array, get new doc ref for object, and batch calls together\n\n  objectsToAdd.forEach(obj => {\n    const newDocRef = collectionRef.doc(obj.title);\n    batch.set(newDocRef, obj);\n  });\n  return await batch.commit();\n};\n\nconst convertCollectionsSnapshotToMap = collections => {\n  const transformedCollection = collections.docs.map(doc => {\n    const _doc$data = doc.data(),\n          title = _doc$data.title,\n          items = _doc$data.items;\n\n    return {\n      routeName: encodeURI(title.toLowerCase()),\n      id: doc.id,\n      title,\n      items\n    };\n  });\n  console.log(transformedCollection);\n}; // export needed objects\n\n\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nconst provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({\n  prompt: \"select_account\"\n});\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\nexport default firebase;","map":{"version":3,"sources":["C:\\Users\\hayam\\Projects\\react\\online-store\\src\\firebase\\firebase.utils.js"],"names":["firebase","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","createUserProfileDocument","userAuth","extraData","userRef","firestore","doc","uid","snapShot","get","exists","displayName","email","createdAt","Date","set","e","console","log","message","initializeApp","addCollectionDocuments","collectionKey","objectsToAdd","collectionRef","collection","batch","forEach","obj","newDocRef","title","commit","convertCollectionsSnapshotToMap","collections","transformedCollection","docs","map","data","items","routeName","encodeURI","toLowerCase","id","auth","provider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup"],"mappings":"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","sourcesContent":["import firebase from \"firebase/app\";\r\nimport \"firebase/firestore\";\r\nimport \"firebase/auth\";\r\n\r\nconst config = {\r\n  apiKey: \"AIzaSyDdojOuN3-mqZFJL80sSkPyn--tkZOHVlw\",\r\n  authDomain: \"anorak-db.firebaseapp.com\",\r\n  databaseURL: \"https://anorak-db.firebaseio.com\",\r\n  projectId: \"anorak-db\",\r\n  storageBucket: \"anorak-db.appspot.com\",\r\n  messagingSenderId: \"895274800817\",\r\n  appId: \"1:895274800817:web:70ba2c9ddebad1b6c8f490\",\r\n  measurementId: \"G-68PG449E20\"\r\n};\r\n\r\n// for storing user data in firebase\r\nexport const createUserProfileDocument = async (userAuth, extraData) => {\r\n  // return if no user logged in\r\n  if (!userAuth) return;\r\n\r\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\r\n  const snapShot = await userRef.get();\r\n  // create snapshot if it hasn't been created\r\n  if (!snapShot.exists) {\r\n    const { displayName, email } = userAuth;\r\n    const createdAt = new Date(); // timestamp\r\n\r\n    try {\r\n      await userRef.set({\r\n        displayName,\r\n        email,\r\n        createdAt,\r\n        ...extraData\r\n      });\r\n    } catch (e) {\r\n      console.log(\"error creating user\", e.message);\r\n    }\r\n  }\r\n\r\n  return userRef;\r\n};\r\n\r\nfirebase.initializeApp(config);\r\n\r\nexport const addCollectionDocuments = async (collectionKey, objectsToAdd) => {\r\n  const collectionRef = firestore.collection(collectionKey);\r\n\r\n  const batch = firestore.batch();\r\n  // loop over objectsToAdd array, get new doc ref for object, and batch calls together\r\n  objectsToAdd.forEach(obj => {\r\n    const newDocRef = collectionRef.doc(obj.title);\r\n    batch.set(newDocRef, obj);\r\n  });\r\n\r\n  return await batch.commit();\r\n};\r\n\r\nconst convertCollectionsSnapshotToMap = collections => {\r\n  const transformedCollection = collections.docs.map(doc => {\r\n    const { title, items } = doc.data();\r\n\r\n    return {\r\n      routeName: encodeURI(title.toLowerCase()),\r\n      id: doc.id,\r\n      title,\r\n      items\r\n    };\r\n  });\r\n\r\n  console.log(transformedCollection);\r\n};\r\n\r\n// export needed objects\r\nexport const auth = firebase.auth();\r\nexport const firestore = firebase.firestore();\r\n\r\nconst provider = new firebase.auth.GoogleAuthProvider();\r\nprovider.setCustomParameters({ prompt: \"select_account\" });\r\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\r\n\r\nexport default firebase;\r\n"]},"metadata":{},"sourceType":"module"}